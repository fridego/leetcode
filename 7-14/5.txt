//C++代码

class Solution {
public:
    string longestPalindrome(string s) {
	//寻找最长回文子串
	int size = s.size();
	if (size <= 1) return s;
	//用动态规划方法
	//dp为size*size大小的矩阵，dp[i][j]表示以s[i]开头，s[j]结尾的回文串长度（如果不是回文串，则为0）
	vector<vector<int>> dp(size);
	for (int i = 0; i<size; i++) {
		for (int j = 0; j<size; j++) {
			//初始化，将对角线元素设为1
			if(i==j) dp[i].push_back(1);
			else dp[i].push_back(0);
		}
	}
	int start = 0, max = 1;
	for (int j = 0; j < size;j++){
		for (int i = j - 1; i >= 0; i--) {
			if (s[i] == s[j]) {
				if(j-i==1) dp[i][j] = 2;
				else {
					if (dp[i + 1][j - 1]>0) {
						dp[i][j] = dp[i + 1][j - 1] + 2;
					}
					else dp[i][j] = 0;
				}
			}
			else dp[i][j] = 0;
			if (dp[i][j]>max) {
				max = dp[i][j]; start = i;
			}
		}
	}
	return s.substr(start, max);
    }
};